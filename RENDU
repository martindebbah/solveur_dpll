                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 60
Nom, prénom 1: CHERIFI Rayan
Nom, prénom 2: DEBBAH Martin


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

   La commande `make dpll` s'exécute sans erreur, ni warning.
La commande `./dpll sudoku-4x4.cnf` donne également la réponse attendue.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

   `simplifie` est une fonction récursive qui utilise un pattern matching sur les éléments de `clauses`.
Si `clauses` est l'ensemble vide, on retourne l'ensemble vide.
Ensuite, pour chaque clause c, on vérifie si c contient l, le littéral à simplifier.
Si c'est le cas, on appelle seulement récursivement la fonction `simplifie`.
Sinon, on applique `filter_map` à c. (On applique également `List.rev` pour garder la clause dans l'ordre d'origine)
On utilise un filtre qui permet de renvoyer c sans la négation de l, si elle existe.
Finalement, on concatène la clause filtrée à l'appel récursif de `simplifie`.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

   Nous n'avons pas utilisé de fonction auxiliaire. On utilise un `match` sur chaque clause de l'ensemble des clauses.
Si l'une d'entre elles correspond à x :: [], c'est qu'elle ne contient qu'un seul littéral, donc qu'elle est unitaire.
Dans ce cas on retourne x, sinon on appelle récursivement `unitaire` jusqu'à que `clauses` corresponde à [].
Si ce cas est atteint, c'est qu'aucune clause n'est unitaire, on lève alors l'exception demandée.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

   La première fonction auxiliaire que nous avons utilisée est `List.flatten`.
Elle nous permet d'avoir tous les littéraux dans une seule liste.
Ensuite, grâce aux fonctions `List.map` et `List.mem`, on regroupe les littéraux et leur négation, si elle existe,
dans une liste de tuple. Finalement, grâce à la fonction `unitaire` nous regardons s'il existe un élément seul.
Si c'est le cas, cela veut dire qu'il existe un littéral sans négation.
On peut donc retourner ce littéral. Dans le cas contraire, on lève l'exception demandée.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

   La formule `[[1;-2;-3];[-2;3];[-2]]` est un cas où les deux implémentations de solveur SAT ont un comportement différent.
La fonction `solveur_split` donnera comme résultat `1 -2 0` alors que la fonction `solveur_dpll_rec` donnera `-2 0`.
Cette différence est dûe au fait que dans `solveur_split`, on simplifie toujours par le premier élément de la liste.
On commence donc par simplifier par `1`, puis par `-2`.
Alors qu'avec `solveur_dpll_rec`, on commence par simplifier les clauses unitaires.
Sachant que `[-2]` est unitaire dans cet exemple, le deuxième algorithme simplifie d'abord par `-2`.
Cela renvoie alors l'ensemble vide de clauses, les valeurs des littéraux `1` et `3` n'ont donc aucune importance.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

   Nous savons que notre implémentation de `pur` pouvait être effectuée autrement.
Seulement, après avoir eu l'idée de réutiliser `unitaire`, nous avons décidé qu'il était plus intéressant de l'implémenter de cette manière.

---

--fin du fichier RENDU--